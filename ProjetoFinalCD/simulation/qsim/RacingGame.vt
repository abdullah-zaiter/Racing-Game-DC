// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/03/2017 09:49:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    SomeRandomStuff
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SomeRandomStuff_vlg_sample_tst(
	ClockAnel,
	ClockPista,
	sampler_tx
);
input  ClockAnel;
input  ClockPista;
output sampler_tx;

reg sample;
time current_time;
always @(ClockAnel or ClockPista)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module SomeRandomStuff_vlg_check_tst (
	Linha1,
	Linha2,
	Linha3,
	Linha4,
	Linha5,
	Linha6,
	Linha7,
	Linha8,
	Out,
	sampler_rx
);
input  Linha1;
input  Linha2;
input  Linha3;
input  Linha4;
input  Linha5;
input  Linha6;
input  Linha7;
input  Linha8;
input [0:7] Out;
input sampler_rx;

reg  Linha1_expected;
reg  Linha2_expected;
reg  Linha3_expected;
reg  Linha4_expected;
reg  Linha5_expected;
reg  Linha6_expected;
reg  Linha7_expected;
reg  Linha8_expected;
reg [0:7] Out_expected;

reg  Linha1_prev;
reg  Linha2_prev;
reg  Linha3_prev;
reg  Linha4_prev;
reg  Linha5_prev;
reg  Linha6_prev;
reg  Linha7_prev;
reg  Linha8_prev;
reg [0:7] Out_prev;

reg  Linha1_expected_prev;
reg  Linha2_expected_prev;
reg  Linha3_expected_prev;
reg  Linha4_expected_prev;
reg  Linha5_expected_prev;
reg  Linha6_expected_prev;
reg  Linha7_expected_prev;
reg  Linha8_expected_prev;
reg [0:7] Out_expected_prev;

reg  last_Linha1_exp;
reg  last_Linha2_exp;
reg  last_Linha3_exp;
reg  last_Linha4_exp;
reg  last_Linha5_exp;
reg  last_Linha6_exp;
reg  last_Linha7_exp;
reg  last_Linha8_exp;
reg [0:7] last_Out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	Linha1_prev = Linha1;
	Linha2_prev = Linha2;
	Linha3_prev = Linha3;
	Linha4_prev = Linha4;
	Linha5_prev = Linha5;
	Linha6_prev = Linha6;
	Linha7_prev = Linha7;
	Linha8_prev = Linha8;
	Out_prev = Out;
end

// update expected /o prevs

always @(trigger)
begin
	Linha1_expected_prev = Linha1_expected;
	Linha2_expected_prev = Linha2_expected;
	Linha3_expected_prev = Linha3_expected;
	Linha4_expected_prev = Linha4_expected;
	Linha5_expected_prev = Linha5_expected;
	Linha6_expected_prev = Linha6_expected;
	Linha7_expected_prev = Linha7_expected;
	Linha8_expected_prev = Linha8_expected;
	Out_expected_prev = Out_expected;
end



// expected Linha1
initial
begin
	Linha1_expected = 1'bX;
end 

// expected Linha2
initial
begin
	Linha2_expected = 1'bX;
end 

// expected Linha3
initial
begin
	Linha3_expected = 1'bX;
end 

// expected Linha4
initial
begin
	Linha4_expected = 1'bX;
end 

// expected Linha5
initial
begin
	Linha5_expected = 1'bX;
end 

// expected Linha6
initial
begin
	Linha6_expected = 1'bX;
end 

// expected Linha7
initial
begin
	Linha7_expected = 1'bX;
end 

// expected Linha8
initial
begin
	Linha8_expected = 1'bX;
end 
// expected Out[ 7 ]
initial
begin
	Out_expected[7] = 1'bX;
end 
// expected Out[ 6 ]
initial
begin
	Out_expected[6] = 1'bX;
end 
// expected Out[ 5 ]
initial
begin
	Out_expected[5] = 1'bX;
end 
// expected Out[ 4 ]
initial
begin
	Out_expected[4] = 1'bX;
end 
// expected Out[ 3 ]
initial
begin
	Out_expected[3] = 1'bX;
end 
// expected Out[ 2 ]
initial
begin
	Out_expected[2] = 1'bX;
end 
// expected Out[ 1 ]
initial
begin
	Out_expected[1] = 1'bX;
end 
// expected Out[ 0 ]
initial
begin
	Out_expected[0] = 1'bX;
end 
// generate trigger
always @(Linha1_expected or Linha1 or Linha2_expected or Linha2 or Linha3_expected or Linha3 or Linha4_expected or Linha4 or Linha5_expected or Linha5 or Linha6_expected or Linha6 or Linha7_expected or Linha7 or Linha8_expected or Linha8 or Out_expected or Out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Linha1 = %b | expected Linha2 = %b | expected Linha3 = %b | expected Linha4 = %b | expected Linha5 = %b | expected Linha6 = %b | expected Linha7 = %b | expected Linha8 = %b | expected Out = %b | ",Linha1_expected_prev,Linha2_expected_prev,Linha3_expected_prev,Linha4_expected_prev,Linha5_expected_prev,Linha6_expected_prev,Linha7_expected_prev,Linha8_expected_prev,Out_expected_prev);
	$display("| real Linha1 = %b | real Linha2 = %b | real Linha3 = %b | real Linha4 = %b | real Linha5 = %b | real Linha6 = %b | real Linha7 = %b | real Linha8 = %b | real Out = %b | ",Linha1_prev,Linha2_prev,Linha3_prev,Linha4_prev,Linha5_prev,Linha6_prev,Linha7_prev,Linha8_prev,Out_prev);
`endif
	if (
		( Linha1_expected_prev !== 1'bx ) && ( Linha1_prev !== Linha1_expected_prev )
		&& ((Linha1_expected_prev !== last_Linha1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Linha1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Linha1_expected_prev);
		$display ("     Real value = %b", Linha1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Linha1_exp = Linha1_expected_prev;
	end
	if (
		( Linha2_expected_prev !== 1'bx ) && ( Linha2_prev !== Linha2_expected_prev )
		&& ((Linha2_expected_prev !== last_Linha2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Linha2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Linha2_expected_prev);
		$display ("     Real value = %b", Linha2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Linha2_exp = Linha2_expected_prev;
	end
	if (
		( Linha3_expected_prev !== 1'bx ) && ( Linha3_prev !== Linha3_expected_prev )
		&& ((Linha3_expected_prev !== last_Linha3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Linha3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Linha3_expected_prev);
		$display ("     Real value = %b", Linha3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Linha3_exp = Linha3_expected_prev;
	end
	if (
		( Linha4_expected_prev !== 1'bx ) && ( Linha4_prev !== Linha4_expected_prev )
		&& ((Linha4_expected_prev !== last_Linha4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Linha4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Linha4_expected_prev);
		$display ("     Real value = %b", Linha4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Linha4_exp = Linha4_expected_prev;
	end
	if (
		( Linha5_expected_prev !== 1'bx ) && ( Linha5_prev !== Linha5_expected_prev )
		&& ((Linha5_expected_prev !== last_Linha5_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Linha5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Linha5_expected_prev);
		$display ("     Real value = %b", Linha5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Linha5_exp = Linha5_expected_prev;
	end
	if (
		( Linha6_expected_prev !== 1'bx ) && ( Linha6_prev !== Linha6_expected_prev )
		&& ((Linha6_expected_prev !== last_Linha6_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Linha6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Linha6_expected_prev);
		$display ("     Real value = %b", Linha6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Linha6_exp = Linha6_expected_prev;
	end
	if (
		( Linha7_expected_prev !== 1'bx ) && ( Linha7_prev !== Linha7_expected_prev )
		&& ((Linha7_expected_prev !== last_Linha7_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Linha7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Linha7_expected_prev);
		$display ("     Real value = %b", Linha7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Linha7_exp = Linha7_expected_prev;
	end
	if (
		( Linha8_expected_prev !== 1'bx ) && ( Linha8_prev !== Linha8_expected_prev )
		&& ((Linha8_expected_prev !== last_Linha8_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Linha8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Linha8_expected_prev);
		$display ("     Real value = %b", Linha8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Linha8_exp = Linha8_expected_prev;
	end
	if (
		( Out_expected_prev[0] !== 1'bx ) && ( Out_prev[0] !== Out_expected_prev[0] )
		&& ((Out_expected_prev[0] !== last_Out_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Out_exp[0] = Out_expected_prev[0];
	end
	if (
		( Out_expected_prev[1] !== 1'bx ) && ( Out_prev[1] !== Out_expected_prev[1] )
		&& ((Out_expected_prev[1] !== last_Out_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Out_exp[1] = Out_expected_prev[1];
	end
	if (
		( Out_expected_prev[2] !== 1'bx ) && ( Out_prev[2] !== Out_expected_prev[2] )
		&& ((Out_expected_prev[2] !== last_Out_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Out_exp[2] = Out_expected_prev[2];
	end
	if (
		( Out_expected_prev[3] !== 1'bx ) && ( Out_prev[3] !== Out_expected_prev[3] )
		&& ((Out_expected_prev[3] !== last_Out_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Out_exp[3] = Out_expected_prev[3];
	end
	if (
		( Out_expected_prev[4] !== 1'bx ) && ( Out_prev[4] !== Out_expected_prev[4] )
		&& ((Out_expected_prev[4] !== last_Out_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Out_exp[4] = Out_expected_prev[4];
	end
	if (
		( Out_expected_prev[5] !== 1'bx ) && ( Out_prev[5] !== Out_expected_prev[5] )
		&& ((Out_expected_prev[5] !== last_Out_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Out_exp[5] = Out_expected_prev[5];
	end
	if (
		( Out_expected_prev[6] !== 1'bx ) && ( Out_prev[6] !== Out_expected_prev[6] )
		&& ((Out_expected_prev[6] !== last_Out_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Out_exp[6] = Out_expected_prev[6];
	end
	if (
		( Out_expected_prev[7] !== 1'bx ) && ( Out_prev[7] !== Out_expected_prev[7] )
		&& ((Out_expected_prev[7] !== last_Out_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Out_exp[7] = Out_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module SomeRandomStuff_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ClockAnel;
reg ClockPista;
// wires                                               
wire Linha1;
wire Linha2;
wire Linha3;
wire Linha4;
wire Linha5;
wire Linha6;
wire Linha7;
wire Linha8;
wire [0:7] Out;

wire sampler;                             

// assign statements (if any)                          
SomeRandomStuff i1 (
// port map - connection between master ports and signals/registers   
	.ClockAnel(ClockAnel),
	.ClockPista(ClockPista),
	.Linha1(Linha1),
	.Linha2(Linha2),
	.Linha3(Linha3),
	.Linha4(Linha4),
	.Linha5(Linha5),
	.Linha6(Linha6),
	.Linha7(Linha7),
	.Linha8(Linha8),
	.Out(Out)
);

// ClockAnel
initial
begin
	ClockAnel = 1'b0;
	ClockAnel = #230000 1'b1;
	# 10000;
	repeat(38)
	begin
		ClockAnel = 1'b0;
		ClockAnel = #10000 1'b1;
		# 10000;
	end
end 

// ClockPista
initial
begin
	repeat(21)
	begin
		ClockPista = 1'b0;
		ClockPista = #5000 1'b1;
		# 5000;
	end
	ClockPista = 1'b0;
	ClockPista = #55000 1'b1;
	# 45000;
	repeat(7)
	begin
		ClockPista = 1'b0;
		ClockPista = #45000 1'b1;
		# 45000;
	end
	ClockPista = 1'b0;
	ClockPista = #45000 1'b1;
end 

SomeRandomStuff_vlg_sample_tst tb_sample (
	.ClockAnel(ClockAnel),
	.ClockPista(ClockPista),
	.sampler_tx(sampler)
);

SomeRandomStuff_vlg_check_tst tb_out(
	.Linha1(Linha1),
	.Linha2(Linha2),
	.Linha3(Linha3),
	.Linha4(Linha4),
	.Linha5(Linha5),
	.Linha6(Linha6),
	.Linha7(Linha7),
	.Linha8(Linha8),
	.Out(Out),
	.sampler_rx(sampler)
);
endmodule

